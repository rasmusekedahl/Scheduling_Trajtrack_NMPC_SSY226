# sch2mpc_graph_parser.py
# This program converts the graph used by scheduler (and auto-generated by instance maker) to the graph required by mpc

import json
import sys

def parse_graph(json_data):
    # Now 'data' contains the parsed JSON data
    nodes = json_data['test_data']['nodes']
    out_graph = {"nodes": {}, "edges": [], "start_list": {}, "charging_stations": []}

    # node
    for _, node in enumerate(nodes):
        key = "d_{}".format(node)
        out_graph["nodes"][key] = [nodes[node]["x"], nodes[node]["y"]]

    # edges
    edges = json_data['edges']

    for _, edge in enumerate(edges):
        n = edge.split(",")
        n1 = "d_{}".format(n[0])
        n2 = "d_{}".format(n[1])
        out_graph["edges"].append([n1, n2])

    # start list
    start_list = json_data["test_data"]["start_list"]

    for _, robo in enumerate(start_list):
        node = "d_{}".format(start_list[robo])
        robo = "R_{}".format(robo)
        out_graph["start_list"][robo] = node

    # charging stations
    charging_stations = json_data["test_data"]["charging_stations"]

    for _, cstation in enumerate(charging_stations):
        cs = "d_{}".format(cstation)
        out_graph["charging_stations"].append(cs)
    
    return out_graph

def write_json(json_data, file_name):
    # Open the file and write to the JSON data
    with open(file_name, 'w') as file:
        file.write(json.dumps(json_data, indent=4))


if __name__ == '__main__':
    # checking command line args
    if len(sys.argv) < 2:
        sys.exit("usage error: missing input file path example: ./output/MM_411_1.0_7000_7.json")

    if len(sys.argv) < 3:
        sys.exit("usage error: missing output file path example: ./output/mpc_mapInstance.json")

    # Specify the path to your JSON file
    in_json_file_path = sys.argv[1]
    out_json_file_path = sys.argv[2]

    # Open the file and load the JSON data
    with open(in_json_file_path, 'r') as file:
        graph_data = json.load(file)
    
    # parse the input graph json and dump to output json file 
    write_json(parse_graph(graph_data), out_json_file_path)
    print("Output dumped to: {}".format(out_json_file_path))

